/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   websocket-request.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

export {WebSocketMessage};

/**
 * A model for a single socket message.
 */
declare class WebSocketMessage {

  /**
   * If the message is a binnary data this will be set to true.
   */
  isBinary: Boolean|null;
  message: any;
  time: any;
  constructor(opts: object|null);
  toJSON(): any;
}

export {WebsocketRequest};

declare namespace ApiElements {

  /**
   * Web socket request panel
   *
   * Contains an UI and logic to make a connection to a websocket server and
   * send and receive messages.
   *
   * ### Example
   *
   * ```html
   * <websocket-request messages="{{messages}}" connected="{{connected}}">
   * </websocket-request>
   * ```
   *
   * ## Required dependency
   *
   * The element requires to `arc-models/websocket-url-history-model.html`
   * component to be placed in the DOM. It can be any other component that
   * handles `websocket-url-history-read`, `websocket-url-history-changed`
   * and `websocket-url-history-query` events.
   *
   * ### Styling
   *
   * `<websocket-request>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--websocket-request` | Mixin applied to the element | `{}`
   * `--websocket-request-url-input` | Mixin applied to the URL input | `{}`
   * `--websocket-request-connection-info` | Applied to the label when connected | `{}`
   * `--websocket-request-connected-url-label` | Mixin applied to the URL label when connected | `{}`
   * `--websocket-request-file-drop` | Mixin applied to the `<file-drop>` element | `{}`
   */
  class WebsocketRequest extends PolymerElement {

    /**
     * Remote URL to connect to
     */
    url: string|null|undefined;

    /**
     * True if the `web-socket` is connecting to the remote server.
     */
    readonly connecting: boolean|null|undefined;

    /**
     * True if the socket is connected.
     */
    readonly connected: boolean|null|undefined;

    /**
     * Tru if the socket is disconnected (`connect` is false) but the component is trying to
     * reconnect.
     */
    retrying: boolean|null|undefined;

    /**
     * If set the socket will automatically retry the connection when it was
     * closed by any reason.
     */
    autoReconnect: boolean|null|undefined;

    /**
     * Computed value, true when the connect button is disabled.
     */
    readonly connectDisabled: boolean|null|undefined;

    /**
     * Currently opened request input tab.
     */
    selectedTab: number|null|undefined;

    /**
     * An input filed for the URL value.
     * It is used by `paper-autocomplete` element as an input target.
     */
    readonly urlInput: object|null|undefined;

    /**
     * A message to be send to the server when connected.
     */
    message: string|null|undefined;

    /**
     * A file object added to the file editor
     */
    file: object|null|undefined;

    /**
     * Computed value, true when the file is set
     */
    hasFile: boolean|null|undefined;

    /**
     * List of messages sent and received from the server.
     */
    messages: any[]|null|undefined;

    /**
     * Computed value, true when send message button is enabled
     */
    readonly messageSendEnabled: boolean|null|undefined;

    /**
     * True if URL suggestions are opened
     */
    suggesionsOpened: boolean|null|undefined;
    connectedCallback(): void;

    /**
     * Called when the socket has been disconnected
     */
    _onDisconnected(e: CustomEvent|null): void;

    /**
     * Called when tghe socket has been connected.
     */
    _onConnected(e: CustomEvent|null): void;

    /**
     * Handler for the `<web-socket>` error event.
     */
    _onError(e: CustomEvent|null): void;

    /**
     * Called when the remote URL has changed.
     * Sets a state of `connectDisabled` attribute.
     */
    _urlChanged(): void;

    /**
     * Connects on enter.
     */
    _urlKeyDown(e: any): void;

    /**
     * Connects to the remove machine.
     */
    connect(): void;

    /**
     * Disconnects from the remote machine.
     */
    disconnect(): void;

    /**
     * Dispatches a CustomEvent of a `type` with `detail` object.
     *
     * @param type Event type
     * @param detail Object to attach to the event
     */
    _dispatch(type: String|null, detail: object|null): CustomEvent|null;

    /**
     * Dispatches `websocket-url-history-read` event
     *
     * @param url History object ID.
     */
    _dispatchReadHistory(url: String|null): CustomEvent|null;

    /**
     * Dispatches `websocket-url-history-read` event
     *
     * @param item History object to update.
     */
    _dispatchUpdateHistory(item: object|null): CustomEvent|null;

    /**
     * Dispatches `websocket-url-history-read` event
     *
     * @param q Value for query event (an URL).
     */
    _dispatchQueryHistory(q: String|null): CustomEvent|null;

    /**
     * Dispatches GA event.
     * The event's category is `Web sockets`.
     *
     * @param action Event action.
     */
    _dispatchGaEvent(action: String|null): CustomEvent|null;

    /**
     * Updates the URL object in the history datastore.
     *
     * @param url An URL to store
     */
    _updateUrlHistory(url: String|null): Promise<any>|null;

    /**
     * Processes datastore response about the URL. If exists it updates
     * the object or creates new otherwise.
     *
     * @param doc Retreived from the data store object. Can be not set if the object do not exists.
     * @param url Request URL to store.
     */
    _processUrlHistoryUpdateResponse(doc: object|null, url: String|null): Promise<any>|null;

    /**
     * Queries for the list of history URLs for autocomplete function.
     *
     * @param e Suggestion request event from autocomplete
     */
    _queryUrlHistory(e: CustomEvent|null): Promise<any>|null;

    /**
     * Connects to the server when URL suggestion has been selected.
     */
    _onSuggestionSelected(): void;

    /**
     * Sends the message to the server when the user pressed ctrl + enter
     * while typing in the input.
     */
    _messageKeydown(e: KeyboardEvent|null): void;

    /**
     * Send a string message.
     */
    _sendMessage(): void;

    /**
     * Handler for the `file-accepted` event sent by the `file-drop` element.
     */
    _fileAccepted(): void;

    /**
     * Send a file message
     */
    _sendFileMessage(): void;

    /**
     * Sends a message to opened socket.
     * Also appends a message to the list of messages.
     *
     * @param data Data to send.
     */
    _send(data: String|Blob|null): void;

    /**
     * Message received handler.
     */
    _messageReceived(e: CustomEvent|null): void;

    /**
     * Compute if send button should be visible.
     *
     * @param obj If anything is passed to the function it should return true.
     * @returns True if file is available.
     */
    _computeButtonVisible(obj: Any|null): Boolean|null;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "websocket-request": ApiElements.WebsocketRequest;
  }
}
